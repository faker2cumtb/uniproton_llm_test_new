diff '--exclude=.git' -ruN CANopenNode/301/CO_config.h canopen/301/CO_config.h
--- CANopenNode/301/CO_config.h	2024-10-09 17:42:51.618008885 +0800
+++ canopen/301/CO_config.h	2024-10-10 11:40:44.385323255 +0800
@@ -24,8 +24,8 @@
  */
 
 
-#ifndef CO_CONFIG_FLAGS_H
-#define CO_CONFIG_FLAGS_H
+#ifndef CO_CONFIG_H
+#define CO_CONFIG_H
 
 #ifdef __cplusplus
 extern "C" {
@@ -572,7 +572,7 @@
  * - CO_CONFIG_SRDO_CHECK_TX - Enable checking data before sending.
  * - CO_CONFIG_RSRDO_CALLS_EXTENSION - Enable calling configured extension
  *   callbacks when received RSRDO CAN message modifies OD entries.
- * - CO_CONFIG_TRSRDO_CALLS_EXTENSION - Enable calling configured extension
+ * - CO_CONFIG_TSRDO_CALLS_EXTENSION - Enable calling configured extension
  *   callbacks before TSRDO CAN message is sent.
  * - #CO_CONFIG_FLAG_CALLBACK_PRE - Enable custom callback after preprocessing
  *   received RSRDO CAN message.
@@ -806,4 +806,4 @@
 }
 #endif /* __cplusplus */
 
-#endif /* CO_CONFIG_FLAGS_H */
+#endif /* CO_CONFIG_H */
diff '--exclude=.git' -ruN CANopenNode/301/CO_driver.h canopen/301/CO_driver.h
--- CANopenNode/301/CO_driver.h	2024-10-09 17:42:51.622008947 +0800
+++ canopen/301/CO_driver.h	2024-10-10 11:44:33.456066788 +0800
@@ -143,14 +143,22 @@
 #define CO_SWAP_32(x) x
 /** Macro must swap bytes, if CO_BIG_ENDIAN is defined */
 #define CO_SWAP_64(x) x
-/** NULL, for general usage */
-#define NULL (0)
+//
+/** Boolean data type for general use */
+typedef uint_fast8_t bool_t;
+/** REAL32 in CANopen (0008h), single precision floating point value, 32-bit */
+typedef float        float32_t;
+/** REAL64 in CANopen (0011h), double precision floating point value, 64-bit */
+typedef double       float64_t;
+// #include <stdbool.h>
 /** Logical true, for general use */
 #define true 1
 /** Logical false, for general use */
 #define false 0
-/** Boolean data type for general use */
-typedef uint_fast8_t bool_t;
+// #include <stddef.h>
+/** NULL, for general usage */
+#define NULL (0)
+// #include <stdint.h>
 /** INTEGER8 in CANopen (0002h), 8-bit signed integer */
 typedef signed char int8_t;
 /** INTEGER16 in CANopen (0003h), 16-bit signed integer */
@@ -167,10 +175,6 @@
 typedef unsigned long int uint32_t;
 /** UNSIGNED64 in CANopen (001Bh), 64-bit unsigned integer */
 typedef unsigned long long int uint64_t;
-/** REAL32 in CANopen (0008h), single precision floating point value, 32-bit */
-typedef float float32_t;
-/** REAL64 in CANopen (0011h), double precision floating point value, 64-bit */
-typedef double float64_t;
 /** @} */
 
 
@@ -491,8 +495,8 @@
     CO_CAN_ID_RPDO_3 = 0x400,      /**< 0x400, Default RPDO3 (+nodeID) */
     CO_CAN_ID_TPDO_4 = 0x480,      /**< 0x480, Default TPDO4 (+nodeID) */
     CO_CAN_ID_RPDO_4 = 0x500,      /**< 0x500, Default RPDO5 (+nodeID) */
-    CO_CAN_ID_SDO_SRV = 0x580, /**< 0x580, SDO response from server (+nodeID) */
-    CO_CAN_ID_SDO_CLI = 0x600, /**< 0x600, SDO request from client (+nodeID) */
+    CO_CAN_ID_SDO_SRV = 0x580,     /**< 0x580, SDO response from server (+nodeID) */
+    CO_CAN_ID_SDO_CLI = 0x600,     /**< 0x600, SDO request from client (+nodeID) */
     CO_CAN_ID_HEARTBEAT = 0x700,   /**< 0x700, Heartbeat message */
     CO_CAN_ID_LSS_SLV = 0x7E4,     /**< 0x7E4, LSS response from slave */
     CO_CAN_ID_LSS_MST = 0x7E5      /**< 0x7E5, LSS request from master */
@@ -524,18 +528,15 @@
  * counter is more or equal to 256.
  */
 typedef enum {
-    CO_CAN_ERRTX_WARNING = 0x0001,  /**< 0x0001, CAN transmitter warning */
-    CO_CAN_ERRTX_PASSIVE = 0x0002,  /**< 0x0002, CAN transmitter passive */
-    CO_CAN_ERRTX_BUS_OFF = 0x0004,  /**< 0x0004, CAN transmitter bus off */
-    CO_CAN_ERRTX_OVERFLOW = 0x0008, /**< 0x0008, CAN transmitter overflow */
-
-    CO_CAN_ERRTX_PDO_LATE = 0x0080, /**< 0x0080, TPDO is outside sync window */
-
-    CO_CAN_ERRRX_WARNING = 0x0100,  /**< 0x0100, CAN receiver warning */
-    CO_CAN_ERRRX_PASSIVE = 0x0200,  /**< 0x0200, CAN receiver passive */
-    CO_CAN_ERRRX_OVERFLOW = 0x0800, /**< 0x0800, CAN receiver overflow */
-
-    CO_CAN_ERR_WARN_PASSIVE = 0x0303/**< 0x0303, combination */
+    CO_CAN_ERRTX_WARNING    = 0x0001,  /**< 0x0001, CAN transmitter warning */
+    CO_CAN_ERRTX_PASSIVE    = 0x0002,  /**< 0x0002, CAN transmitter passive */
+    CO_CAN_ERRTX_BUS_OFF    = 0x0004,  /**< 0x0004, CAN transmitter bus off */
+    CO_CAN_ERRTX_OVERFLOW   = 0x0008,  /**< 0x0008, CAN transmitter overflow */
+    CO_CAN_ERRTX_PDO_LATE   = 0x0080,  /**< 0x0080, TPDO is outside sync window */
+    CO_CAN_ERRRX_WARNING    = 0x0100,  /**< 0x0100, CAN receiver warning */
+    CO_CAN_ERRRX_PASSIVE    = 0x0200,  /**< 0x0200, CAN receiver passive */
+    CO_CAN_ERRRX_OVERFLOW   = 0x0800,  /**< 0x0800, CAN receiver overflow */
+    CO_CAN_ERR_WARN_PASSIVE = 0x0303   /**< 0x0303, combination */
 } CO_CAN_ERR_status_t;
 
 
diff '--exclude=.git' -ruN CANopenNode/301/CO_Emergency.c canopen/301/CO_Emergency.c
--- CANopenNode/301/CO_Emergency.c	2024-10-09 17:42:51.614008824 +0800
+++ canopen/301/CO_Emergency.c	2024-10-10 11:44:33.080062150 +0800
@@ -626,6 +626,12 @@
     if (CO_CONFIG_ERR_CONDITION_MANUFACTURER) {
         errorRegister |= CO_ERR_REG_MANUFACTURER;
     }
+    if (errorRegister) {
+        static uint8_t errorRegisterPrev = 0;
+        if (errorRegisterPrev != errorRegister) {
+            errorRegisterPrev = errorRegister;
+        }
+    }
     *em->errorRegister = errorRegister;
 
     if (!NMTisPreOrOperational) {
@@ -647,6 +653,7 @@
         ) {
             em->inhibitEmTimer = 0;
  #else
+        (void)timeDifference_us;
         if (fifoPpPtr != em->fifoWrPtr && !em->CANtxBuff->bufferFull) {
  #endif
             /* add error register to emergency message */
@@ -762,6 +769,7 @@
 
     /* safely write data, and increment pointers */
     CO_LOCK_EMCY(em->CANdevTx);
+
     if (setError) { *errorStatusBits |=  bitmask; }
     else {          *errorStatusBits &= ~bitmask; }
 
diff '--exclude=.git' -ruN CANopenNode/301/CO_fifo.c canopen/301/CO_fifo.c
--- CANopenNode/301/CO_fifo.c	2024-10-09 17:42:51.622008947 +0800
+++ canopen/301/CO_fifo.c	2024-10-10 11:40:44.389323301 +0800
@@ -108,6 +108,8 @@
         if (crc != NULL) {
             crc16_ccitt_single(crc, *buf);
         }
+#else
+    (void)crc;
 #endif
 
         /* increment variables */
diff '--exclude=.git' -ruN CANopenNode/301/CO_NMT_Heartbeat.c canopen/301/CO_NMT_Heartbeat.c
--- CANopenNode/301/CO_NMT_Heartbeat.c	2024-10-09 17:42:51.614008824 +0800
+++ canopen/301/CO_NMT_Heartbeat.c	2024-10-10 11:44:33.132062791 +0800
@@ -226,7 +226,7 @@
     (void)timerNext_us; /* may be unused */
     CO_NMT_internalState_t NMTstateCpy = NMT->operatingState;
     CO_NMT_reset_cmd_t resetCommand = CO_RESET_NOT;
-    bool_t NNTinit = NMTstateCpy == CO_NMT_INITIALIZING;
+    bool_t NNTinit = (NMTstateCpy == CO_NMT_INITIALIZING);
 
     NMT->HBproducerTimer = (NMT->HBproducerTimer > timeDifference_us )
                          ? (NMT->HBproducerTimer - timeDifference_us) : 0;
diff '--exclude=.git' -ruN CANopenNode/301/CO_ODinterface.c canopen/301/CO_ODinterface.c
--- CANopenNode/301/CO_ODinterface.c	2024-10-09 17:42:51.614008824 +0800
+++ canopen/301/CO_ODinterface.c	2024-10-10 11:40:44.393323347 +0800
@@ -25,6 +25,7 @@
 #include <string.h>
 #define OD_DEFINITION
 #include "301/CO_ODinterface.h"
+#include "301/CO_SDOserver.h"
 
 
 /******************************************************************************/
@@ -193,10 +194,10 @@
         if (subIndex > 0) { return ODR_SUB_NOT_EXIST; }
         CO_PROGMEM OD_obj_var_t *odo = entry->odObject;
 
-
         stream->attribute = odo->attribute;
         stream->dataOrig = odo->dataOrig;
         stream->dataLength = odo->dataLength;
+
         break;
     }
     case ODT_ARR: {
@@ -215,6 +216,7 @@
                              : ptr + odo->dataElementSizeof * (subIndex - 1);
             stream->dataLength = odo->dataElementLength;
         }
+
         break;
     }
     case ODT_REC: {
@@ -231,6 +233,7 @@
         stream->attribute = odo->attribute;
         stream->dataOrig = odo->dataOrig;
         stream->dataLength = odo->dataLength;
+
         break;
     }
     default: {
@@ -265,33 +268,42 @@
 
 /******************************************************************************/
 uint32_t OD_getSDOabCode(ODR_t returnCode) {
+    /// @todo shianhu: use CO_SDO_abortCode_t
     static const uint32_t abortCodes[ODR_COUNT] = {
-        0x00000000UL, /* No abort */
-        0x05040005UL, /* Out of memory */
-        0x06010000UL, /* Unsupported access to an object */
-        0x06010001UL, /* Attempt to read a write only object */
-        0x06010002UL, /* Attempt to write a read only object */
-        0x06020000UL, /* Object does not exist in the object dictionary */
-        0x06040041UL, /* Object cannot be mapped to the PDO */
-        0x06040042UL, /* Num and len of object to be mapped exceeds PDO len */
-        0x06040043UL, /* General parameter incompatibility reasons */
-        0x06040047UL, /* General internal incompatibility in device */
-        0x06060000UL, /* Access failed due to hardware error */
-        0x06070010UL, /* Data type does not match, length does not match */
-        0x06070012UL, /* Data type does not match, length too high */
-        0x06070013UL, /* Data type does not match, length too short */
-        0x06090011UL, /* Sub index does not exist */
-        0x06090030UL, /* Invalid value for parameter (download only). */
-        0x06090031UL, /* Value range of parameter written too high */
-        0x06090032UL, /* Value range of parameter written too low */
-        0x06090036UL, /* Maximum value is less than minimum value. */
-        0x060A0023UL, /* Resource not available: SDO connection */
-        0x08000000UL, /* General error */
-        0x08000020UL, /* Data cannot be transferred or stored to application */
-        0x08000021UL, /* Data cannot be transferred because of local control */
-        0x08000022UL, /* Data cannot be tran. because of present device state */
-        0x08000023UL, /* Object dict. not present or dynamic generation fails */
-        0x08000024UL  /* No data available */
+        CO_SDO_AB_NONE              , /* No abort */
+        /*
+        CO_SDO_AB_TOGGLE_BIT            = 0x05030000UL,
+        CO_SDO_AB_TIMEOUT               = 0x05040000UL,
+        CO_SDO_AB_CMD                   = 0x05040001UL,
+        CO_SDO_AB_BLOCK_SIZE            = 0x05040002UL,
+        CO_SDO_AB_SEQ_NUM               = 0x05040003UL,
+        CO_SDO_AB_CRC                   = 0x05040004UL,
+        */
+        CO_SDO_AB_OUT_OF_MEM        , /* Out of memory */
+        CO_SDO_AB_UNSUPPORTED_ACCESS, /* Unsupported access to an object */
+        CO_SDO_AB_WRITEONLY         , /* Attempt to read a write only object */
+        CO_SDO_AB_READONLY          , /* Attempt to write a read only object */
+        CO_SDO_AB_NOT_EXIST         , /* Object does not exist in the object dictionary */
+        CO_SDO_AB_NO_MAP            , /* Object cannot be mapped to the PDO */
+        CO_SDO_AB_MAP_LEN           , /* Num and len of object to be mapped exceeds PDO len */
+        CO_SDO_AB_PRAM_INCOMPAT     , /* General parameter incompatibility reasons */
+        CO_SDO_AB_DEVICE_INCOMPAT   , /* General internal incompatibility in device */
+        CO_SDO_AB_HW                , /* Access failed due to hardware error */
+        CO_SDO_AB_TYPE_MISMATCH     , /* Data type does not match, length does not match */
+        CO_SDO_AB_DATA_LONG         , /* Data type does not match, length too high */
+        CO_SDO_AB_DATA_SHORT        , /* Data type does not match, length too short */
+        CO_SDO_AB_SUB_UNKNOWN       , /* Sub index does not exist */
+        CO_SDO_AB_INVALID_VALUE     , /* Invalid value for parameter (download only). */
+        CO_SDO_AB_VALUE_HIGH        , /* Value range of parameter written too high */
+        CO_SDO_AB_VALUE_LOW         , /* Value range of parameter written too low */
+        CO_SDO_AB_MAX_LESS_MIN      , /* Maximum value is less than minimum value. */
+        CO_SDO_AB_NO_RESOURCE       , /* Resource not available: SDO connection */
+        CO_SDO_AB_GENERAL           , /* General error */
+        CO_SDO_AB_DATA_TRANSF       , /* Data cannot be transferred or stored to application */
+        CO_SDO_AB_DATA_LOC_CTRL     , /* Data cannot be transferred because of local control */
+        CO_SDO_AB_DATA_DEV_STATE    , /* Data cannot be tran. because of present device state */
+        CO_SDO_AB_DATA_OD           , /* Object dict. not present or dynamic generation fails */
+        CO_SDO_AB_NO_DATA             /* No data available */
     };
 
     return (returnCode < 0 || returnCode >= ODR_COUNT) ?
diff '--exclude=.git' -ruN CANopenNode/301/CO_ODinterface.h canopen/301/CO_ODinterface.h
--- CANopenNode/301/CO_ODinterface.h	2024-10-09 17:42:51.614008824 +0800
+++ canopen/301/CO_ODinterface.h	2024-10-10 11:40:44.393323347 +0800
@@ -143,62 +143,34 @@
 /* !!!! WARNING !!!!
  * If changing these values, change also OD_getSDOabCode() function!
  */
-    /** Read/write is only partial, make more calls */
-    ODR_PARTIAL = -1,
-    /** SDO abort 0x00000000 - Read/write successfully finished */
-    ODR_OK = 0,
-    /** SDO abort 0x05040005 - Out of memory */
-    ODR_OUT_OF_MEM = 1,
-    /** SDO abort 0x06010000 - Unsupported access to an object */
-    ODR_UNSUPP_ACCESS = 2,
-    /** SDO abort 0x06010001 - Attempt to read a write only object */
-    ODR_WRITEONLY = 3,
-    /** SDO abort 0x06010002 - Attempt to write a read only object */
-    ODR_READONLY = 4,
-    /** SDO abort 0x06020000 - Object does not exist in the object dict. */
-    ODR_IDX_NOT_EXIST = 5,
-    /** SDO abort 0x06040041 - Object cannot be mapped to the PDO */
-    ODR_NO_MAP = 6,
-    /** SDO abort 0x06040042 - PDO length exceeded */
-    ODR_MAP_LEN = 7,
-    /** SDO abort 0x06040043 - General parameter incompatibility reasons */
-    ODR_PAR_INCOMPAT = 8,
-    /** SDO abort 0x06040047 - General internal incompatibility in device */
-    ODR_DEV_INCOMPAT = 9,
-    /** SDO abort 0x06060000 - Access failed due to hardware error */
-    ODR_HW = 10,
-    /** SDO abort 0x06070010 - Data type does not match */
-    ODR_TYPE_MISMATCH = 11,
-    /** SDO abort 0x06070012 - Data type does not match, length too high */
-    ODR_DATA_LONG = 12,
-    /** SDO abort 0x06070013 - Data type does not match, length too short */
-    ODR_DATA_SHORT = 13,
-    /** SDO abort 0x06090011 - Sub index does not exist */
-    ODR_SUB_NOT_EXIST = 14,
-    /** SDO abort 0x06090030 - Invalid value for parameter (download only) */
-    ODR_INVALID_VALUE = 15,
-    /** SDO abort 0x06090031 - Value range of parameter written too high */
-    ODR_VALUE_HIGH = 16,
-    /** SDO abort 0x06090032 - Value range of parameter written too low */
-    ODR_VALUE_LOW = 17,
-    /** SDO abort 0x06090036 - Maximum value is less than minimum value */
-    ODR_MAX_LESS_MIN = 18,
-    /** SDO abort 0x060A0023 - Resource not available: SDO connection */
-    ODR_NO_RESOURCE = 19,
-    /** SDO abort 0x08000000 - General error */
-    ODR_GENERAL = 20,
-    /** SDO abort 0x08000020 - Data cannot be transferred or stored to app */
-    ODR_DATA_TRANSF = 21,
-    /** SDO abort 0x08000021 - Data can't be transferred (local control) */
-    ODR_DATA_LOC_CTRL = 22,
-    /** SDO abort 0x08000022 - Data can't be transf. (present device state) */
-    ODR_DATA_DEV_STATE = 23,
-    /** SDO abort 0x08000023 - Object dictionary not present */
-    ODR_OD_MISSING = 24,
-    /** SDO abort 0x08000024 - No data available */
-    ODR_NO_DATA = 25,
-    /** Last element, number of responses */
-    ODR_COUNT = 26
+    ODR_PARTIAL = -1,         /** Read/write is only partial, make more calls */
+    ODR_OK = 0,               /** SDO abort 0x00000000 - Read/write successfully finished */
+    ODR_OUT_OF_MEM = 1,       /** SDO abort 0x05040005 - Out of memory */
+    ODR_UNSUPP_ACCESS = 2,    /** SDO abort 0x06010000 - Unsupported access to an object */
+    ODR_WRITEONLY = 3,        /** SDO abort 0x06010001 - Attempt to read a write only object */
+    ODR_READONLY = 4,         /** SDO abort 0x06010002 - Attempt to write a read only object */
+    ODR_IDX_NOT_EXIST = 5,    /** SDO abort 0x06020000 - Object does not exist in the object dict. */
+    ODR_NO_MAP = 6,           /** SDO abort 0x06040041 - Object cannot be mapped to the PDO */
+    ODR_MAP_LEN = 7,          /** SDO abort 0x06040042 - PDO length exceeded */
+    ODR_PAR_INCOMPAT = 8,     /** SDO abort 0x06040043 - General parameter incompatibility reasons */
+    ODR_DEV_INCOMPAT = 9,     /** SDO abort 0x06040047 - General internal incompatibility in device */
+    ODR_HW = 10,              /** SDO abort 0x06060000 - Access failed due to hardware error */
+    ODR_TYPE_MISMATCH = 11,   /** SDO abort 0x06070010 - Data type does not match */
+    ODR_DATA_LONG = 12,       /** SDO abort 0x06070012 - Data type does not match, length too high */
+    ODR_DATA_SHORT = 13,      /** SDO abort 0x06070013 - Data type does not match, length too short */
+    ODR_SUB_NOT_EXIST = 14,   /** SDO abort 0x06090011 - Sub index does not exist */
+    ODR_INVALID_VALUE = 15,   /** SDO abort 0x06090030 - Invalid value for parameter (download only) */
+    ODR_VALUE_HIGH = 16,      /** SDO abort 0x06090031 - Value range of parameter written too high */
+    ODR_VALUE_LOW = 17,       /** SDO abort 0x06090032 - Value range of parameter written too low */
+    ODR_MAX_LESS_MIN = 18,    /** SDO abort 0x06090036 - Maximum value is less than minimum value */
+    ODR_NO_RESOURCE = 19,     /** SDO abort 0x060A0023 - Resource not available: SDO connection */
+    ODR_GENERAL = 20,         /** SDO abort 0x08000000 - General error */
+    ODR_DATA_TRANSF = 21,     /** SDO abort 0x08000020 - Data cannot be transferred or stored to app */
+    ODR_DATA_LOC_CTRL = 22,   /** SDO abort 0x08000021 - Data can't be transferred (local control) */
+    ODR_DATA_DEV_STATE = 23,  /** SDO abort 0x08000022 - Data can't be transf. (present device state) */
+    ODR_OD_MISSING = 24,      /** SDO abort 0x08000023 - Object dictionary not present */
+    ODR_NO_DATA = 25,         /** SDO abort 0x08000024 - No data available */
+    ODR_COUNT = 26            /** Last element, number of responses */
 } ODR_t;
 
 
diff '--exclude=.git' -ruN CANopenNode/301/CO_PDO.c canopen/301/CO_PDO.c
--- CANopenNode/301/CO_PDO.c	2024-10-09 17:42:51.618008885 +0800
+++ canopen/301/CO_PDO.c	2024-10-10 11:44:33.228063975 +0800
@@ -914,6 +914,8 @@
                     *timerNext_us = diff;
                 }
             }
+ #else
+            (void)timerNext_us;
  #endif
         }
 #endif /* (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE */
diff '--exclude=.git' -ruN CANopenNode/301/CO_SDOclient.c canopen/301/CO_SDOclient.c
--- CANopenNode/301/CO_SDOclient.c	2024-10-09 17:42:51.618008885 +0800
+++ canopen/301/CO_SDOclient.c	2024-10-10 11:44:33.280064617 +0800
@@ -270,6 +270,9 @@
 #if (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_LOCAL
     SDO_C->OD = OD;
     SDO_C->nodeId = nodeId;
+#else
+    (void)OD;
+    (void)nodeId;
 #endif
     SDO_C->CANdevRx = CANdevRx;
     SDO_C->CANdevRxIdx = CANdevRxIdx;
@@ -469,6 +472,8 @@
         SDO_C->state = CO_SDO_ST_DOWNLOAD_BLK_INITIATE_REQ;
     }
     else
+#else
+    (void)blockEnable;
 #endif
     {
         SDO_C->state = CO_SDO_ST_DOWNLOAD_INITIATE_REQ;
@@ -1142,6 +1147,8 @@
         SDO_C->state = CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ;
     }
     else
+#else
+    (void)blockEnable;
 #endif
     {
         SDO_C->state = CO_SDO_ST_UPLOAD_INITIATE_REQ;
diff '--exclude=.git' -ruN CANopenNode/301/CO_SDOclient.h canopen/301/CO_SDOclient.h
--- CANopenNode/301/CO_SDOclient.h	2024-10-09 17:42:51.618008885 +0800
+++ canopen/301/CO_SDOclient.h	2024-10-10 11:40:44.397323393 +0800
@@ -127,14 +127,14 @@
                                  CO_CAN_ID_SDO_SRV + nodeId,
                                  nodeId);
     if (SDO_ret != CO_SDO_RT_ok_communicationEnd) {
-        return -1
+        return -1;
     }
 
     // initiate download
     SDO_ret = CO_SDOclientDownloadInitiate(SDO_C, index, subIndex,
                                            dataSize, 1000, false);
     if (SDO_ret != CO_SDO_RT_ok_communicationEnd) {
-        return -1
+        return -1;
     }
 
     // fill data
diff '--exclude=.git' -ruN CANopenNode/301/CO_SDOserver.c canopen/301/CO_SDOserver.c
--- CANopenNode/301/CO_SDOserver.c	2024-10-09 17:42:51.618008885 +0800
+++ canopen/301/CO_SDOserver.c	2024-10-10 11:44:33.332065258 +0800
@@ -676,6 +676,8 @@
         if (calculateCrc && SDO->block_crcEnabled) {
             SDO->block_crc = crc16_ccitt(bufShifted, countRd, SDO->block_crc);
         }
+#else
+        (void)calculateCrc;
 #endif
 
     }
@@ -700,7 +702,6 @@
     CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
     bool_t isNew = CO_FLAG_READ(SDO->CANrxNew);
 
-
     if (SDO->valid && SDO->state == CO_SDO_ST_IDLE && !isNew) {
         /* Idle and nothing new */
         ret = CO_SDO_RT_ok_communicationEnd;
diff '--exclude=.git' -ruN CANopenNode/301/CO_SYNC.c canopen/301/CO_SYNC.c
--- CANopenNode/301/CO_SYNC.c	2024-10-09 17:42:51.618008885 +0800
+++ canopen/301/CO_SYNC.c	2024-10-10 11:44:33.360065603 +0800
@@ -117,7 +117,6 @@
             0,                  /* rtr */
             (void*)SYNC,        /* object passed to receive function */
             CO_SYNC_receive);   /* this function will process received message*/
-
         if (CANret != CO_ERROR_NO) {
             return ODR_DEV_INCOMPAT;
         }
@@ -251,7 +250,7 @@
                                      sizeof(uint32_t), NULL);
 #if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
     if (SYNC->OD_1006_period == NULL) {
-        if (errInfo != NULL) { 
+        if (errInfo != NULL) {
             *errInfo = OD_getIndex(OD_1006_commCyclePeriod);
         }
         return CO_ERROR_OD_PARAMETERS;
@@ -282,7 +281,7 @@
     if (OD_1019_syncCounterOvf != NULL) {
         odRet = OD_get_u8(OD_1019_syncCounterOvf, 0, &syncCounterOvf, true);
         if (odRet != ODR_OK) {
-            if (errInfo != NULL) { 
+            if (errInfo != NULL) {
                 *errInfo = OD_getIndex(OD_1019_syncCounterOvf);
             }
             return CO_ERROR_OD_PARAMETERS;
diff '--exclude=.git' -ruN CANopenNode/301/CO_TIME.c canopen/301/CO_TIME.c
--- CANopenNode/301/CO_TIME.c	2024-10-09 17:42:51.618008885 +0800
+++ canopen/301/CO_TIME.c	2024-10-10 11:44:33.384065899 +0800
@@ -130,8 +130,10 @@
     TIME->isProducer = (cobIdTimeStamp & 0x40000000L) != 0;
     CO_FLAG_CLEAR(TIME->CANrxNew);
 
+    CO_TIME_set(TIME, 100, 200, 3000); ///< @todo shianhu: how to get time of day?
+
     /* configure TIME consumer message reception */
-	if (TIME->isConsumer) {
+    if (TIME->isConsumer) {
         CO_ReturnError_t ret = CO_CANrxBufferInit(
                 CANdevRx,       /* CAN device */
                 CANdevRxIdx,    /* rx buffer index */
diff '--exclude=.git' -ruN CANopenNode/301/CO_TIME.h canopen/301/CO_TIME.h
--- CANopenNode/301/CO_TIME.h	2024-10-09 17:42:51.618008885 +0800
+++ canopen/301/CO_TIME.h	2024-10-10 11:40:44.397323393 +0800
@@ -176,14 +176,14 @@
                                uint16_t days,
                                uint32_t producerInterval_ms)
 {
-    (void)producerInterval_ms; /* may be unused */
-
     if (TIME != NULL) {
         TIME->residual_us = 0;
         TIME->ms = ms;
         TIME->days = days;
 #if ((CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER)
-        TIME->producerTimer_ms = TIME->producerInterval_ms =producerInterval_ms;
+        TIME->producerTimer_ms = TIME->producerInterval_ms = producerInterval_ms;
+#else
+        (void)producerInterval_ms; /* may be unused */
 #endif
     }
 }
diff '--exclude=.git' -ruN CANopenNode/304/CO_GFC.c canopen/304/CO_GFC.c
--- CANopenNode/304/CO_GFC.c	2024-10-09 17:42:51.622008947 +0800
+++ canopen/304/CO_GFC.c	2024-10-10 11:44:33.504067380 +0800
@@ -105,7 +105,7 @@
         CANidRxGFC,      /* CAN identifier */
         0x7FF,           /* mask */
         0,               /* rtr */
-        (void *)GFC,     /* object passed to receive function */
+        (void*)GFC,     /* object passed to receive function */
         CO_GFC_receive); /* this function will process received message */
     if (r != CO_ERROR_NO) {
         return r;
diff '--exclude=.git' -ruN CANopenNode/304/CO_SRDO.c canopen/304/CO_SRDO.c
--- CANopenNode/304/CO_SRDO.c	2024-10-09 17:42:51.622008947 +0800
+++ canopen/304/CO_SRDO.c	2024-10-10 11:44:33.528067676 +0800
@@ -174,7 +174,7 @@
     ODR_t odRet;
     size_t pdoDataLength[2] = { 0, 0 };
     uint8_t mappedObjectsCount = 0;
-    uint8_t *errInfo = NULL;         
+    uint8_t *errInfo = NULL;
     //uint32_t *erroneousMap = NULL;
 
     /* number of mapped application objects in SRDO */
@@ -189,7 +189,7 @@
         //*erroneousMap = 1;
         return CO_ERROR_NO;
     }
-    
+
     /* iterate mapped OD variables */
     for(uint8_t i=0; i<mappedObjectsCount; i++){
         bool_t isRSRDO = SRDO->CommPar_informationDirection == CO_SRDO_RX;
@@ -279,7 +279,7 @@
     uint32_t cob, tmp_u32;
     uint32_t map;
     ODR_t odRet;
-    
+
     result = crc16_ccitt(&SRDO->CommPar_informationDirection, 1, result);
     tmp_u16 = CO_SWAP_16(SRDO->CommPar_safetyCycleTime);
     memcpy(&buffer[0], &tmp_u16, sizeof(tmp_u16));
@@ -331,14 +331,14 @@
     if ( returnCode != ODR_OK ){
         return returnCode;
     }
-    
+
     if ((stream == NULL) || (buf == NULL) || (countRead == NULL)
     ) {
         return ODR_DEV_INCOMPAT;
     }
-    
+
     CO_SRDO_t *SRDO = stream->object;
-    
+
     /* Reading Object Dictionary variable */
     if ((stream->subIndex == 5U) || (stream->subIndex == 6U)){
         uint32_t value = CO_getUint32(buf);
@@ -439,12 +439,12 @@
 static ODR_t OD_write_SRDO_mappingParam(OD_stream_t *stream, const void *buf,
                            OD_size_t count, OD_size_t *countWritten)
 {
-    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL) || 
+    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL) ||
         (stream->subIndex > CO_SRDO_MAX_MAPPED_ENTRIES)
     ) {
         return ODR_DEV_INCOMPAT;
     }
-    
+
     CO_SRDO_t *SRDO = stream->object;
     CO_SRDOGuard_t *SRDOGuard = SRDO->SRDOGuard;
 
@@ -471,8 +471,8 @@
         }
     }
     SRDOGuard->configurationValid = CO_SRDO_INVALID;
-    
-    
+
+
     /* write value to the original location in the Object Dictionary */
     return OD_writeOriginal(stream, buf, count, countWritten);
 }
@@ -484,15 +484,15 @@
     if ( returnCode != ODR_OK ){
         return returnCode;
     }
-    
+
     if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (countRead == NULL)
     ) {
         return ODR_DEV_INCOMPAT;
     }
-    
+
     CO_SRDOGuard_t *SRDOGuard = stream->object;
     CO_setUint8(buf, SRDOGuard->configurationValid);
-    
+
     return ODR_OK;
 }
 
@@ -511,7 +511,7 @@
         return ODR_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
     }
     SRDOGuard->checkCRC = ( value == CO_SRDO_VALID_MAGIC );
-    
+
     SRDOGuard->configurationValid = value;
 
     /* write value to the original location in the Object Dictionary */
@@ -574,7 +574,7 @@
     SRDOGuard->OD_13FE_extension.read = OD_read_13FE;
     SRDOGuard->OD_13FE_extension.write = OD_write_13FE;
     OD_extension_init(OD_13FE_SRDOValid, &SRDOGuard->OD_13FE_extension);
-    
+
     SRDOGuard->OD_13FF_extension.object = SRDOGuard;
     SRDOGuard->OD_13FF_extension.read = OD_readOriginal;
     SRDOGuard->OD_13FF_extension.write = OD_write_13FF;
@@ -653,7 +653,7 @@
         (OD_130x_SRDOCommPar==NULL) || (OD_138x_SRDOMapPar==NULL) || (CANdevRx==NULL) || (CANdevTx==NULL)){
         return CO_ERROR_ILLEGAL_ARGUMENT;
     }
-        
+
     /* clear object */
     memset(SRDO, 0, sizeof(CO_SRDO_t));
 
@@ -702,7 +702,7 @@
         return CO_ERROR_OD_PARAMETERS;
     }
     SRDO->CommPar_safetyCycleTime= safetyCycleTime;
-    
+
     uint8_t safetyRelatedValidationTime = 0;
     odRet = OD_get_u8(OD_130x_SRDOCommPar, 3, &safetyRelatedValidationTime, true);
     if (odRet != ODR_OK) {
@@ -712,7 +712,7 @@
         return CO_ERROR_OD_PARAMETERS;
     }
     SRDO->CommPar_safetyRelatedValidationTime = safetyRelatedValidationTime;
-    
+
     uint8_t transmissionType = 0;
     odRet = OD_get_u8(OD_130x_SRDOCommPar, 4, &transmissionType, true);
     if (odRet != ODR_OK) {
@@ -722,7 +722,7 @@
         return CO_ERROR_OD_PARAMETERS;
     }
     SRDO->CommPar_transmissionType = transmissionType;
-    
+
     uint32_t COB_ID1_normal = 0;
     odRet = OD_get_u32(OD_130x_SRDOCommPar, 5, &COB_ID1_normal, true);
     if (odRet != ODR_OK) {
@@ -732,7 +732,7 @@
         return CO_ERROR_OD_PARAMETERS;
     }
     SRDO->CommPar_COB_ID1_normal = COB_ID1_normal;
-    
+
     uint32_t COB_ID2_inverted = 0;
     odRet = OD_get_u32(OD_130x_SRDOCommPar, 6, &COB_ID2_inverted, true);
     if (odRet != ODR_OK) {
@@ -748,7 +748,7 @@
     SRDO->OD_communicationParam_ext.read = OD_read_SRDO_communicationParam;
     SRDO->OD_communicationParam_ext.write = OD_write_SRDO_communicationParam;
     OD_extension_init(OD_130x_SRDOCommPar, &SRDO->OD_communicationParam_ext);
-    
+
     uint8_t numberOfMappedObjects = 0;
     odRet = OD_get_u8(OD_138x_SRDOMapPar, 0, &numberOfMappedObjects, true);
     if (odRet != ODR_OK) {
diff '--exclude=.git' -ruN CANopenNode/305/CO_LSSslave.c canopen/305/CO_LSSslave.c
--- CANopenNode/305/CO_LSSslave.c	2024-10-09 17:42:51.622008947 +0800
+++ canopen/305/CO_LSSslave.c	2024-10-10 11:44:33.576068268 +0800
@@ -49,8 +49,7 @@
  * message with correct identifier will be received. For more information and
  * description of parameters see file CO_driver.h.
  */
-static void CO_LSSslave_receive(void *object, void *msg)
-{
+static void CO_LSSslave_receive(void *object, void *msg) {
     CO_LSSslave_t *LSSslave = (CO_LSSslave_t*)object;
     uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 
diff '--exclude=.git' -ruN CANopenNode/CANopen.c canopen/CANopen.c
--- CANopenNode/CANopen.c	2024-10-09 17:42:51.622008947 +0800
+++ canopen/CANopen.c	2024-10-10 11:44:33.604068614 +0800
@@ -966,6 +966,7 @@
                                 uint8_t nodeId,
                                 uint32_t *errInfo)
 {
+    (void)OD_statusBits;
     (void)SDOclientTimeoutTime_ms; (void)SDOclientBlockTransfer;
     CO_ReturnError_t err;
 
@@ -1397,9 +1398,8 @@
     uint16_t CANerrorStatus = co->CANmodule->CANerrorStatus;
     bool_t LSSslave_configuration = false;
  #if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
-    if (CO_GET_CNT(LSS_SLV) == 1
-        && CO_LSSslave_getState(co->LSSslave) == CO_LSS_STATE_CONFIGURATION
-    ) {
+    if (CO_GET_CNT(LSS_SLV) == 1 &&
+        CO_LSSslave_getState(co->LSSslave) == CO_LSS_STATE_CONFIGURATION) {
         LSSslave_configuration = true;
     }
  #endif
@@ -1423,7 +1423,7 @@
             CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS,
             timerNext_us);
     }
-#endif
+#endif /* (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE */
 
     /* CANopen Node ID is unconfigured (LSS slave), stop processing here */
     if (co->nodeIdUnconfigured) {
@@ -1600,11 +1600,11 @@
     if (co->nodeIdUnconfigured) {
         return;
     }
-    
+
     bool_t NMTisOperational =
         CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 
-    uint8_t firstOperational = CO_SRDOGuard_process(co->SRDOGuard, 
+    uint8_t firstOperational = CO_SRDOGuard_process(co->SRDOGuard,
                         NMTisOperational);
 
     for (int16_t i = 0; i < CO_GET_CNT(SRDO); i++) {
diff '--exclude=.git' -ruN CANopenNode/CANopen.h canopen/CANopen.h
--- CANopenNode/CANopen.h	2024-10-09 17:42:51.622008947 +0800
+++ canopen/CANopen.h	2024-10-10 11:40:44.401323440 +0800
@@ -514,12 +514,12 @@
  * Function must be called in the communication reset section.
  *
  * @param co CANopen object.
- * @param em Emergency object, which is used inside different CANopen objects,
- * usually for error reporting. If NULL, then 'co->em' will be used.
- * if NULL and 'co->CNT_EM' is 0, then function returns with error.
  * @param NMT If 'co->CNT_NMT' is 0, this object must be specified, If
  * 'co->CNT_NMT' is 1,then it is ignored and can be NULL. NMT object is used for
  * retrieving NMT internal state inside CO_process().
+ * @param em Emergency object, which is used inside different CANopen objects,
+ * usually for error reporting. If NULL, then 'co->em' will be used.
+ * if NULL and 'co->CNT_EM' is 0, then function returns with error.
  * @param od CANopen Object dictionary
  * @param OD_statusBits Argument passed to @ref CO_EM_init(). May be NULL.
  * @param NMTcontrol Argument passed to @ref CO_NMT_init().
diff '--exclude=.git' -ruN CANopenNode/Doxyfile canopen/Doxyfile
--- CANopenNode/Doxyfile	2024-10-09 17:42:51.626009008 +0800
+++ canopen/Doxyfile	2024-10-10 11:40:44.401323440 +0800
@@ -1376,7 +1376,7 @@
 # Minimum value: 0, maximum value: 9999, default value: 100.
 # This tag requires that the tag GENERATE_HTML is set to YES.
 
-HTML_INDEX_NUM_ENTRIES = 35
+HTML_INDEX_NUM_ENTRIES = 500
 
 # If the GENERATE_DOCSET tag is set to YES, additional index files will be
 # generated that can be used as input for Apple's Xcode 3 integrated development
@@ -2505,7 +2505,7 @@
 # The default value is: NO.
 # This tag requires that the tag HAVE_DOT is set to YES.
 
-CALL_GRAPH             = NO
+CALL_GRAPH             = YES
 
 # If the CALLER_GRAPH tag is set to YES then doxygen will generate a caller
 # dependency graph for every global function or class method.
@@ -2517,7 +2517,7 @@
 # The default value is: NO.
 # This tag requires that the tag HAVE_DOT is set to YES.
 
-CALLER_GRAPH           = NO
+CALLER_GRAPH           = YES
 
 # If the GRAPHICAL_HIERARCHY tag is set to YES then doxygen will graphical
 # hierarchy of all classes instead of a textual one.
diff '--exclude=.git' -ruN CANopenNode/example/Makefile canopen/example/Makefile
--- CANopenNode/example/Makefile	2024-10-09 17:42:51.626009008 +0800
+++ canopen/example/Makefile	2024-10-10 11:40:44.401323440 +0800
@@ -44,13 +44,16 @@
 LDFLAGS =
 
 
-.PHONY: all clean
+.PHONY: all clean doc
 
 all: clean $(LINK_TARGET)
 
 clean:
 	rm -f $(OBJS) $(LINK_TARGET)
 
+doc:
+	cd $(CANOPEN_SRC) && rm -fr doc/html && doxygen >/dev/null
+
 %.o: %.c
 	$(CC) $(CFLAGS) -c $< -o $@
 
diff '--exclude=.git' -ruN CANopenNode/extra/CO_trace.c canopen/extra/CO_trace.c
--- CANopenNode/extra/CO_trace.c	2024-10-09 17:42:51.626009008 +0800
+++ canopen/extra/CO_trace.c	2024-10-10 11:40:44.405323486 +0800
@@ -402,7 +402,7 @@
 /******************************************************************************/
 void CO_trace_init(
         CO_trace_t             *trace,
-        CO_SDO_t               *SDO,
+        CO_SDOserver_t         *SDO,
         uint8_t                 enabled,
         uint32_t               *timeBuffer,
         int32_t                *valueBuffer,
diff '--exclude=.git' -ruN CANopenNode/extra/CO_trace.h canopen/extra/CO_trace.h
--- CANopenNode/extra/CO_trace.h	2024-10-09 17:42:51.626009008 +0800
+++ canopen/extra/CO_trace.h	2024-10-10 11:40:44.405323486 +0800
@@ -91,7 +91,7 @@
  */
 typedef struct {
     bool_t              enabled;        /**< True, if trace is enabled. */
-    CO_SDO_t           *SDO;            /**< From CO_trace_init(). */
+    CO_SDOserver_t     *SDO;            /**< From CO_trace_init(). */
     uint32_t           *timeBuffer;     /**< From CO_trace_init(). */
     int32_t            *valueBuffer;    /**< From CO_trace_init(). */
     uint32_t            bufferSize;     /**< From CO_trace_init(). */
@@ -138,7 +138,7 @@
  */
 void CO_trace_init(
         CO_trace_t             *trace,
-        CO_SDO_t               *SDO,
+        CO_SDOserver_t         *SDO,
         uint8_t                 enabled,
         uint32_t               *timeBuffer,
         int32_t                *valueBuffer,
