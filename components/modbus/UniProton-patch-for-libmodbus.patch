diff -ruN libmodbus/configure.ac modbus/configure.ac
--- libmodbus/configure.ac	2022-12-08 03:00:14.000000000 +0800
+++ modbus/configure.ac	2024-12-31 09:46:18.089455678 +0800
@@ -133,9 +133,9 @@
 fi
 
 # Check for RS485 support (Linux kernel version 2.6.28+)
-AC_CHECK_DECLS([TIOCSRS485], [], [], [[#include <sys/ioctl.h>]])
+#AC_CHECK_DECLS([TIOCSRS485], [], [], [[#include <sys/ioctl.h>]])
 # Check for RTS flags
-AC_CHECK_DECLS([TIOCM_RTS], [], [], [[#include <sys/ioctl.h>]])
+#AC_CHECK_DECLS([TIOCM_RTS], [], [], [[#include <sys/ioctl.h>]])
 
 # Wtype-limits is not supported by gcc 4.2 (default on recent Mac OS X)
 my_CFLAGS="-Wall \
diff -ruN libmodbus/src/modbus.c modbus/src/modbus.c
--- libmodbus/src/modbus.c	2022-12-08 03:00:14.000000000 +0800
+++ modbus/src/modbus.c	2024-12-31 10:40:08.370270790 +0800
@@ -22,6 +22,7 @@
 
 #include "modbus-private.h"
 #include "modbus.h"
+#include "modbus_port.h"
 
 /* Internal use */
 #define MSG_LENGTH_UNDEFINED -1
@@ -170,6 +171,7 @@
     msg_length = ctx->backend->send_msg_pre(msg, msg_length);
 
     if (ctx->debug) {
+        printf("send:");
         for (i = 0; i < msg_length; i++)
             printf("[%.2X]", msg[i]);
         printf("\n");
@@ -178,9 +180,9 @@
     /* In recovery mode, the write command will be issued until to be
        successful! Disabled by default. */
     do {
-        rc = ctx->backend->send(ctx, msg, msg_length);
+        rc = ctx->backend->_send(ctx, msg, msg_length);
         if (rc == -1) {
-            _error_print(ctx, NULL);
+            _error_print(ctx, "send");
             if (ctx->error_recovery & MODBUS_ERROR_RECOVERY_LINK) {
 #ifdef _WIN32
                 const int wsa_err = WSAGetLastError();
@@ -209,6 +211,8 @@
                 errno = saved_errno;
 #endif
             }
+        } else if (rc == 0) {
+            _error_print(ctx, "send");
         }
     } while ((ctx->error_recovery & MODBUS_ERROR_RECOVERY_LINK) && rc == -1);
 
@@ -405,7 +409,7 @@
     }
 
     while (length_to_read != 0) {
-        rc = ctx->backend->select(ctx, &rset, p_tv, length_to_read);
+        rc = ctx->backend->_select(ctx, &rset, p_tv, length_to_read);
         if (rc == -1) {
             _error_print(ctx, "select");
             if (ctx->error_recovery & MODBUS_ERROR_RECOVERY_LINK) {
@@ -433,7 +437,7 @@
             return -1;
         }
 
-        rc = ctx->backend->recv(ctx, msg + msg_length, length_to_read);
+        rc = ctx->backend->_recv(ctx, msg + msg_length, length_to_read);
         if (rc == 0) {
             errno = ECONNRESET;
             rc = -1;
@@ -469,8 +473,10 @@
         /* Display the hex code of each character received */
         if (ctx->debug) {
             int i;
+            printf("recv:");
             for (i = 0; i < rc; i++)
                 printf("<%.2X>", msg[msg_length + i]);
+            printf("\n");
         }
 
         /* Sums bytes received */
@@ -1888,7 +1894,7 @@
         return -1;
     }
 
-    return ctx->backend->connect(ctx);
+    return ctx->backend->_connect(ctx);
 }
 
 void modbus_close(modbus_t *ctx)
@@ -1896,7 +1902,7 @@
     if (ctx == NULL)
         return;
 
-    ctx->backend->close(ctx);
+    ctx->backend->_close(ctx);
 }
 
 void modbus_free(modbus_t *ctx)
diff -ruN libmodbus/src/modbus-private.h modbus/src/modbus-private.h
--- libmodbus/src/modbus-private.h	2022-12-08 03:00:14.000000000 +0800
+++ modbus/src/modbus-private.h	2024-12-31 09:46:18.089455678 +0800
@@ -77,19 +77,19 @@
     int (*build_response_basis)(sft_t *sft, uint8_t *rsp);
     int (*prepare_response_tid)(const uint8_t *req, int *req_length);
     int (*send_msg_pre)(uint8_t *req, int req_length);
-    ssize_t (*send)(modbus_t *ctx, const uint8_t *req, int req_length);
+    ssize_t (*_send)(modbus_t *ctx, const uint8_t *req, int req_length);
     int (*receive)(modbus_t *ctx, uint8_t *req);
-    ssize_t (*recv)(modbus_t *ctx, uint8_t *rsp, int rsp_length);
+    ssize_t (*_recv)(modbus_t *ctx, uint8_t *rsp, int rsp_length);
     int (*check_integrity)(modbus_t *ctx, uint8_t *msg, const int msg_length);
     int (*pre_check_confirmation)(modbus_t *ctx,
                                   const uint8_t *req,
                                   const uint8_t *rsp,
                                   int rsp_length);
-    int (*connect)(modbus_t *ctx);
+    int (*_connect)(modbus_t *ctx);
     unsigned int (*is_connected)(modbus_t *ctx);
-    void (*close)(modbus_t *ctx);
+    void (*_close)(modbus_t *ctx);
     int (*flush)(modbus_t *ctx);
-    int (*select)(modbus_t *ctx, fd_set *rset, struct timeval *tv, int msg_length);
+    int (*_select)(modbus_t *ctx, fd_set *rset, struct timeval *tv, int msg_length);
     void (*free)(modbus_t *ctx);
 } modbus_backend_t;
 
diff -ruN libmodbus/src/modbus-rtu.c modbus/src/modbus-rtu.c
--- libmodbus/src/modbus-rtu.c	2022-12-08 03:00:14.000000000 +0800
+++ modbus/src/modbus-rtu.c	2024-12-31 10:36:29.880028301 +0800
@@ -26,6 +26,8 @@
 #include <linux/serial.h>
 #endif
 
+#include "modbus_port-rtu.h"
+
 /* Table of CRC values for high-order byte */
 static const uint8_t table_crc_hi[] = {
     0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
@@ -332,7 +334,7 @@
     if (req[0] != rsp[0] && req[0] != MODBUS_BROADCAST_ADDRESS) {
         if (ctx->debug) {
             fprintf(stderr,
-                    "The responding slave %d isn't the requested slave %d\n",
+                    "ERROR The responding slave %d isn't the requested slave %d\n",
                     rsp[0],
                     req[0]);
         }
@@ -919,7 +921,7 @@
         }
 #else
         if (ctx->debug) {
-            fprintf(stderr, "This function isn't supported on your platform\n");
+            fprintf(stderr, "ERROR This function isn't supported on your platform\n");
         }
         errno = ENOTSUP;
         return -1;
@@ -944,7 +946,7 @@
         return ctx_rtu->serial_mode;
 #else
         if (ctx->debug) {
-            fprintf(stderr, "This function isn't supported on your platform\n");
+            fprintf(stderr, "ERROR This function isn't supported on your platform\n");
         }
         errno = ENOTSUP;
         return -1;
@@ -968,7 +970,7 @@
         return ctx_rtu->rts;
 #else
         if (ctx->debug) {
-            fprintf(stderr, "This function isn't supported on your platform\n");
+            fprintf(stderr, "ERROR This function isn't supported on your platform\n");
         }
         errno = ENOTSUP;
         return -1;
@@ -1004,7 +1006,7 @@
         }
 #else
         if (ctx->debug) {
-            fprintf(stderr, "This function isn't supported on your platform\n");
+            fprintf(stderr, "ERROR This function isn't supported on your platform\n");
         }
         errno = ENOTSUP;
         return -1;
@@ -1029,7 +1031,7 @@
         return 0;
 #else
         if (ctx->debug) {
-            fprintf(stderr, "This function isn't supported on your platform\n");
+            fprintf(stderr, "ERROR This function isn't supported on your platform\n");
         }
         errno = ENOTSUP;
         return -1;
@@ -1054,7 +1056,7 @@
         return ctx_rtu->rts_delay;
 #else
         if (ctx->debug) {
-            fprintf(stderr, "This function isn't supported on your platform\n");
+            fprintf(stderr, "ERROR This function isn't supported on your platform\n");
         }
         errno = ENOTSUP;
         return -1;
@@ -1080,7 +1082,7 @@
         return 0;
 #else
         if (ctx->debug) {
-            fprintf(stderr, "This function isn't supported on your platform\n");
+            fprintf(stderr, "ERROR This function isn't supported on your platform\n");
         }
         errno = ENOTSUP;
         return -1;
@@ -1212,14 +1214,14 @@
 
     /* Check device argument */
     if (device == NULL || *device == 0) {
-        fprintf(stderr, "The device string is empty\n");
+        fprintf(stderr, "ERROR The device string is empty\n");
         errno = EINVAL;
         return NULL;
     }
 
     /* Check baud argument */
     if (baud == 0) {
-        fprintf(stderr, "The baud rate value must not be zero\n");
+        fprintf(stderr, "ERROR The baud rate value must not be zero\n");
         errno = EINVAL;
         return NULL;
     }
@@ -1257,6 +1259,7 @@
     if (parity == 'N' || parity == 'E' || parity == 'O') {
         ctx_rtu->parity = parity;
     } else {
+        fprintf(stderr, "ERROR Unsupported parity('%c')\n", parity);
         modbus_free(ctx);
         errno = EINVAL;
         return NULL;
diff -ruN libmodbus/src/modbus-tcp.c modbus/src/modbus-tcp.c
--- libmodbus/src/modbus-tcp.c	2022-12-08 03:00:14.000000000 +0800
+++ modbus/src/modbus-tcp.c	2024-12-31 11:04:00.519868924 +0800
@@ -60,6 +60,7 @@
 
 #include "modbus-tcp-private.h"
 #include "modbus-tcp.h"
+#include "modbus_port-tcp.h"
 
 #ifdef OS_WIN32
 static int _modbus_tcp_init_win32(void)
